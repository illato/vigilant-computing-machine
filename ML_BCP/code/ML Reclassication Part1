---
title: "Risk reclassfication"
author: "Chang"
date: "10/2/2018"
output: word_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Real data

```{r cars}
InterventionData<-read.csv("~/Desktop/Intervention Study/All data_2016_copy.csv",header = TRUE,sep = ",")
head(InterventionData)
str(InterventionData)
table(InterventionData$Band)

mean(as.numeric(as.character(InterventionData$B_14_Age)),na.rm = T)
sd(as.numeric(as.character(InterventionData$B_14_Age)),na.rm = T)
mean(as.numeric(as.character(InterventionData$B_21_AgeBirth[InterventionData$B_21_AgeBirth!=99])),na.rm = T)
sd(as.numeric(as.character(InterventionData$B_21_AgeBirth[InterventionData$B_21_AgeBirth!=99])),na.rm = T)

mean(as.numeric(as.character(InterventionData$B_18_AgeMenstrual[InterventionData$B_18_AgeMenstrual!=99])),na.rm = T)
sd(as.numeric(as.character(InterventionData$B_18_AgeMenstrual[InterventionData$B_18_AgeMenstrual!=99])),na.rm = T)
mean(as.numeric(as.character(InterventionData$B_14_Age[InterventionData$Band==1])),na.rm = T)
mean(as.numeric(as.character(InterventionData$B_14_Age[InterventionData$Band==2])),na.rm = T)
sd(as.numeric(as.character(InterventionData$B_14_Age[InterventionData$Band==1])),na.rm = T)
sd(as.numeric(as.character(InterventionData$B_14_Age[InterventionData$Band==2])),na.rm = T)


#cacner surveillence 

table(InterventionData$rb_81_FreqMamm)
table(InterventionData$rb_81_FreqMamm)

InterventionData$B_14_Age<-as.numeric(as.character(InterventionData$B_14_Age))
InterventionData<-InterventionData[InterventionData$B_14_Age>=35,]
InterventionData<-subset(InterventionData,!is.na(InterventionData$resp_id))

mean(InterventionData$B_14_Age[InterventionData$Band==2])
sd(InterventionData$B_14_Age[InterventionData$Band==2])

table(InterventionData$B_18_AgeMenstrual[InterventionData$Band==2&InterventionData$B_18_AgeMenstrual!=99])
mean(InterventionData$B_18_AgeMenstrual[InterventionData$Band==2&InterventionData$B_18_AgeMenstrual!=99])
sd(InterventionData$B_18_AgeMenstrual[InterventionData$Band==2&InterventionData$B_18_AgeMenstrual!=99])


table(InterventionData$B_22_NumBiopsy[InterventionData$Band==2&InterventionData$B_22_NumBiopsy!=99])
mean(InterventionData$B_22_NumBiopsy[InterventionData$Band==2&InterventionData$B_22_NumBiopsy!=99])
sd(InterventionData$B_22_NumBiopsy[InterventionData$Band==2&InterventionData$B_22_NumBiopsy!=99])

table(InterventionData$B_24_Hyperplasia[InterventionData$Band==2&InterventionData$B_24_Hyperplasia!=99])
mean(InterventionData$B_24_Hyperplasia[InterventionData$Band==2&InterventionData$B_24_Hyperplasia!=99])
sd(InterventionData$B_24_Hyperplasia[InterventionData$Band==2&InterventionData$B_24_Hyperplasia!=99])

table(InterventionData$B_21_AgeBirth[InterventionData$Band==2&InterventionData$B_21_AgeBirth!=99])
mean(InterventionData$B_21_AgeBirth[InterventionData$Band==2&InterventionData$B_21_AgeBirth!=99])
sd(InterventionData$B_21_AgeBirth[InterventionData$Band==2&InterventionData$B_21_AgeBirth!=99])


table(InterventionData$B_24_OvarianCancer[InterventionData$Band==2&InterventionData$B_24_OvarianCancer!=99])
mean(InterventionData$B_24_OvarianCancer[InterventionData$Band==2&InterventionData$B_24_OvarianCancer!=99])
sd(InterventionData$B_24_OvarianCancer[InterventionData$Band==2&InterventionData$B_24_OvarianCancer!=99])


table(InterventionData$rRace_BlackOther [InterventionData$Band==2])
mean(InterventionData$rRace_BlackOther [InterventionData$Band==2])
sd(InterventionData$rRace_BlackOther [InterventionData$Band==2])


table(InterventionData$B_17_Ashkenazi [InterventionData$Band==2])
mean(InterventionData$B_17_Ashkenazi [InterventionData$Band==2])
sd(InterventionData$B_17_Ashkenazi [InterventionData$Band==2])



table(InterventionData$B_49_FamHXBreastNum [InterventionData$Band==2&InterventionData$B_49_FamHXBreastNum!=0])
mean(InterventionData$B_49_FamHXBreastNum [InterventionData$Band==2&InterventionData$B_49_FamHXBreastNum!=0])
sd(InterventionData$B_49_FamHXBreastNum [InterventionData$Band==2&InterventionData$B_49_FamHXBreastNum!=0])



table(InterventionData$B_118_PositiveBRCA1 [InterventionData$Band==2])
mean(InterventionData$B_118_PositiveBRCA1 [InterventionData$Band==2])
sd(InterventionData$B_118_PositiveBRCA1 [InterventionData$Band==2])


table(InterventionData$B_118_PositiveBRCA2 [InterventionData$Band==2])
mean(InterventionData$B_118_PositiveBRCA2 [InterventionData$Band==2])
sd(InterventionData$B_118_PositiveBRCA2 [InterventionData$Band==2])


#recode for BRCA risk estimation 

ID<-as.integer(as.character(InterventionData$resp_id))
T1<-as.numeric(as.character(InterventionData$B_14_Age))

table(InterventionData$B_14_Age)
table(T1)
T2<-90
table(InterventionData$B_22_NumBiopsy)

N_Biop<-as.numeric(InterventionData$B_22_NumBiopsy)
table(N_Biop)

mean(N_Biop[InterventionData$Band==1],na.rm = T)
sd(N_Biop[InterventionData$Band==1],na.rm = T)
sd(N_Biop[InterventionData$Band==2],na.rm = T)
mean(N_Biop[InterventionData$Band==2],na.rm = T)
HypPlas<-as.numeric(InterventionData$B_24_Hyperplasia)
table(HypPlas[InterventionData$Band==1])
table(HypPlas[InterventionData$Band==2])
table(HypPlas)
table(InterventionData$B_24_Hyperplasia)
AgeMen<-as.numeric(InterventionData$B_18_AgeMenstrual)
mean(AgeMen[AgeMen<99][InterventionData$Band==1],na.rm = T)
mean(AgeMen[AgeMen<99][InterventionData$Band==2],na.rm = T)
sd(AgeMen[AgeMen<99][InterventionData$Band==1],na.rm = T)
sd(AgeMen[AgeMen<99][InterventionData$Band==2],na.rm = T)
table(InterventionData$B_18_AgeMenstrual)
table(AgeMen)

Age1st<-as.numeric(as.character(InterventionData$B_21_AgeBirth))
mean(Age1st[Age1st<99][InterventionData$Band==1],na.rm = T)
mean(Age1st[Age1st<99][InterventionData$Band==2],na.rm = T)
sd(Age1st[Age1st<99][InterventionData$Band==1],na.rm = T)
sd(Age1st[Age1st<99][InterventionData$Band==2],na.rm = T)
table(InterventionData$B_21_AgeBirth)
table(Age1st)

N_Rels<-as.numeric(as.character(InterventionData$B_49_FamHXBreastNum))
table(N_Rels)
table(InterventionData$B_49_FamHXBreastNum)
mean(N_Rels[InterventionData$Band==1],na.rm = T)
mean(N_Rels[InterventionData$Band==2],na.rm = T)

sd(N_Rels[InterventionData$Band==1],na.rm = T)
sd(N_Rels[InterventionData$Band==2],na.rm = T)

mean(N_Rels,na.rm = T)

sd(N_Rels,na.rm = T)

DCIS<-as.numeric(as.character(InterventionData$B_24_DCIS))
table(DCIS[InterventionData$Band==1])
table(DCIS[InterventionData$Band==2])

LCIS<-as.numeric(as.character(InterventionData$B_24_LCIS))
table(LCIS[InterventionData$Band==1])
table(LCIS[InterventionData$Band==2])



Race<-as.factor(InterventionData$Race_BlackOther)
colnames(InterventionData)
table(InterventionData$B_15_Ethnicity)
table(Race)
table(InterventionData$Race_BlackOther)

table(InterventionData$B_17_Ashkenazi)
table(InterventionData$B_21_AgeBirth)
table(InterventionData$B_17_Ashkenazi)
table(Race[InterventionData$Band==1])
table(Race[InterventionData$Band==2])
Case_YN<-ifelse(InterventionData$Band==1,1,0) # 1 YBCS 2 Relative
Band<-as.factor(InterventionData$Band)
Recode_intervention <- cbind(ID,T1,T2,N_Biop,HypPlas,AgeMen,Age1st,N_Rels,Race,Case_YN,Band)
Recode_intervention <- as.data.frame(Recode_intervention)
str(Recode_intervention)
table(T1)
table(Recode_intervention$Case_YN)
#Case_YN
#  0   1 
# 431 859
# 293+850

Recode_intervention$HypPlas<-ifelse(Recode_intervention$N_Biop==0,99,Recode_intervention$HypPlas)



# remove the age <35
Recode_intervention<-Recode_intervention[Recode_intervention$T1>=35,]
Recode_intervention<-subset(Recode_intervention,!is.na(Recode_intervention$ID))
table(Recode_intervention$Case_YN*Recode_intervention$T1)
library(BCRA)
Abrisk_Intervention<-risk.summary(Recode_intervention)
Abrisk_Intervention<-as.data.frame(Abrisk_Intervention)
str(Abrisk_Intervention)

Abrisk_Intervention$AbsRisk<-as.numeric(as.character(Abrisk_Intervention$AbsRisk))
cutoff<-cbind(rank(Abrisk_Intervention$AbsRisk),Abrisk_Intervention$AbsRisk)


Abrisk_Intervention$AGEcata<-ifelse(as.numeric(as.character(Abrisk_Intervention$T1))<90,"70-79",Abrisk_Intervention$AGEcata)
Abrisk_Intervention$AGEcata<-ifelse(as.numeric(as.character(Abrisk_Intervention$T1))<70,"60-69",Abrisk_Intervention$AGEcata)
Abrisk_Intervention$AGEcata<-ifelse(as.numeric(as.character(Abrisk_Intervention$T1))<60,"50-59",Abrisk_Intervention$AGEcata)
Abrisk_Intervention$AGEcata<-ifelse(as.numeric(as.character(Abrisk_Intervention$T1))<50,"40-49",Abrisk_Intervention$AGEcata)
Abrisk_Intervention$AGEcata<-ifelse(as.numeric(as.character(Abrisk_Intervention$T1))<40,"30-39",Abrisk_Intervention$AGEcata)
table(as.numeric(as.character(Abrisk_Intervention$T1)))
table(Abrisk_Intervention$AGEcata)
Abrisk_Intervention$riskcata<-ifelse(as.numeric(as.character(Abrisk_Intervention$AbsRisk))<20,0,1)

table(Abrisk_Intervention$riskcata)
table(Abrisk_Intervention$AGEcata,Abrisk_Intervention$riskcata)

Abrisk_Intervention$Band<-Recode_intervention$Band

table(Abrisk_Intervention$Band)

table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$Band==2],Abrisk_Intervention$riskcata[Abrisk_Intervention$Band==2])

# FP  TP  TN  FN 
#272 578  21 272 
#diagnosticErrors(Gail_real_AUC2)
#acc       sens       spec        ppv        npv        lor 
#0.52405949  0.68000000  0.07167235  0.68000000  0.07167235 -1.80750783 
```




```{r cars}

# remove unrelated variables ! 
#Recode_intervention$BrCa <- ifelse(Recode_intervention$Case_YN==0,0,1) 
colnames(Recode_intervention)
input <- Recode_intervention[ ,-which(names(Recode_intervention) %in% c("Case_YN","ID","T2","Band"))]
output <- as.factor(Recode_intervention$Case_YN)
c(dim(input), dim(output))

# using Recode_intervention data:
X <- as.data.frame(input); Y <- output
neg <- "1"   # "Control" == "1"

#detach("package:caret", unload=TRUE)
library("crossval")

# Side note: There is a function name collision for "crossval", the same method is present in 
# the "mlr" (machine Learning in R) package and in the "crossval" package.  
# To specify a function call from a specific package do:  packagename::functionname()

my.ada <- function (train.x, train.y, test.x, test.y, negative, formula){
  ada.fit <- ada(train.x, train.y)
  predict.y <- predict(ada.fit, test.x)
  #count TP, FP, TN, FN, Accuracy, etc.
  out <- confusionMatrix(test.y, predict.y, negative = negative)
  # negative  is the label of a negative "null" sample (default: "control").
  return (out)
}

library("ada")
cv.out <- crossval::crossval(my.ada, X, Y, K = 5, B = 2, negative = neg)
# the label of a negative "null" sample (default: "control")

out <- diagnosticErrors(cv.out$stat) 
print(cv.out$stat)
#FP    TP    TN    FN 
#9.5  68.8 161.9  17.2  
print(out)
##acc      sens      spec       ppv       npv       lor 
##0.8827647 0.7201365 0.9388235 0.8022814 0.9068182 3.6760038

?confusionMatrix

# Logistic 
X =as.matrix(input)    # Predictor variables
Y =as.matrix(output) 
lm.logit <- glm(as.numeric(Y) ~ ., data = as.data.frame(X), family = "binomial")
ynew <- predict(lm.logit, as.data.frame(X)); #plot(ynew)
ynew2 <- ifelse(exp(ynew)<median(exp(ynew)), 0, 1); # plot(ynew2)

predfun.logit = function(train.x, train.y, test.x, test.y, neg)
{   lm.logit <- glm(train.y ~ ., data = train.x, family = "binomial")
ynew = predict(lm.logit, test.x )
# compute TP, FP, TN, FN
ynew2 <- ifelse(exp(ynew)<median(exp(ynew)), 0, 1)
out = confusionMatrix(test.y, ynew2, negative=neg)  # Binary outcome, we can use confusionMatrix
return( out )
}

cv.out.logit = crossval::crossval(predfun.logit, as.data.frame(X), as.numeric(Y), K=5, B=2, neg="1")
cv.out.logit$stat.cv
print(cv.out.logit$stat)
#FP    TP    TN    FN 
#49.0  79.4 122.4   6.6  
diagnosticErrors(cv.out.logit$stat)
#acc      sens      spec       ppv       npv       lor 
#0.7191601 0.9249147 0.6482353 0.4754386 0.9616056 3.1223676 


#KNN qda lda

library("class")

X <- as.data.frame(input); Y <- output
predfun.knn =function(train.x, train.y, test.x, test.y, neg)
{
  require("class")
  knn.fit =knn(train.x, test.x, cl =train.y, prob=T)  # knn is already a prediction function!!!
  # ynew = predict(knn.fit, test.x)$class           # no need of another prediction, in this case
  out.knn =confusionMatrix(test.y, knn.fit, negative=neg)
  return( out.knn )
}   

predfun.qda = function(train.x, train.y, test.x, test.y, negative)
{
  require("MASS") # for lda function
  qda.fit = qda(train.x, grouping=train.y)
  ynew = predict(qda.fit,test.x)$class
  out.qda = confusionMatrix(test.y, ynew, negative=negative)
  return( out.qda )
}  


predfun.lda = function(train.x, train.y, test.x, test.y, neg)
{
  require("MASS")
  lda.fit = lda(train.x, grouping=train.y)
  ynew = predict(lda.fit, test.x)$class
  out.lda = confusionMatrix(test.y, ynew, negative=neg)
  return( out.lda )
}


predfun.lm =function(train.x, train.y, test.x, test.y)
{     lm.fit =lm(train.y ~. , data=train.x)
ynew =predict(lm.fit, test.x )
# compute squared error risk (MSE)
out =mean( (ynew -test.y)^2)

#out.lda = confusionMatrix(test.y, ynew, negative=neg)
#out =mean( (ynew -test.y)^2)  out = confusionMatrix(test.y, ynew, negative=neg)
# note that, in general, when fitting linear model to continuous outcome variable (Y),
# we can???t use the out<-confusionMatrix(test.y, ynew, negative=negative), as it requires a binary outcome
# this is why we use the MSE as an estimate of the discrepancy between observed & predicted values
return(out)
}



cv.out.lm =crossval::crossval(predfun.lm, as.data.frame(X), as.numeric(Y), K=5, B=20) #c(cv.out.lm$stat, cv.out.lm$stat.se) 
cv.out.lm
#$stat
#0.0997666
#$stat.se
#0.001173287

actuals_preds <- data.frame(cbind(actuals=Recode_intervention$Case_YN, predicteds=ynew))
correlation_accuracy.lm <- cor(actuals_preds)#0.6812951

cv.out.knn =crossval::crossval(predfun.knn, X, Y, K=5, B=2, neg="1")
cv.out.qda = crossval::crossval(predfun.qda, as.data.frame(X), as.factor(Y), K=5, B=2, neg="1")
cv.out.lda = crossval::crossval(predfun.lda, X, Y, K=5, B=2, neg="1")





print(cv.out.qda$stat)
#  FP   TP   TN   FN 
#43.6  75.0 127.8  11.0

print(cv.out.knn$stat)
#  FP   TP   TN   FN 
#26.8  56.9 144.6  29.1 

print(cv.out.lda$stat)
#  FP   TP   TN   FN 
#15.8  57.1 155.6  28.9 

cv.out.lda$stat.cv


diagnosticErrors(cv.out.lda$stat)
#       acc       sens       spec        ppv        npv        lor 
# 0.8692038 0.7815700 0.8994118 0.7281399 0.9227520 3.4655446 
diagnosticErrors(cv.out.qda$stat)
#      acc      sens      spec       ppv       npv       lor 
#0.8674541 0.7713311 0.9005882 0.7278583 0.9195195 3.4196201  
diagnosticErrors(cv.out.knn$stat)
#       acc       sens       spec        ppv        npv        lor 
#0.8088364 0.6109215 0.8770588 0.6313933 0.8673647 2.4160554 


# random forest
library(randomForest)
require(randomForest)
library(caret)

rf_randoms<-Recode_intervention
rf_randoms$Case_YN <- as.factor(rf_randoms$Case_YN)
rf.mdl <- randomForest(rf_randoms[,1:9], rf_randoms[,"Case_YN"], ntree=100)

rf.mdl$votes
rf.cv <- rfcv( rf_randoms[,1:9], rf_randoms[,"Case_YN"], cv.fold = 3)
#with(rf.cv, plot(n.var, error.cv, type="b", col="red"))
#rf.cv$error.cv
#confussion.rf<-confusionMatrix(rf.cv$predicted, rf_randoms$Case_YN)
#confussion.rf
rf_random_AUC <- rf.mdl$confusion # (217+799)/(1143)

rfgail<-as.data.frame(rf.mdl$votes)
Abrisk_Intervention$MLabsrsik<-100*(rfgail$`1`)
Abrisk_Intervention$MLcat<-ifelse(rfgail$`1`<0.2,0,1)

table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$Band==2],Abrisk_Intervention$MLcat[Abrisk_Intervention$Band==2])
table(Abrisk_Intervention$AGEcata,Abrisk_Intervention$riskcata,Abrisk_Intervention$MLcat)

table(Abrisk_Intervention$MLcat[Abrisk_Intervention$AGEcata==3&Abrisk_Intervention$riskcata==0])
table(Abrisk_Intervention$MLcat[Abrisk_Intervention$AGEcata==4&Abrisk_Intervention$riskcata==0])
table(Abrisk_Intervention$MLcat[Abrisk_Intervention$AGEcata==5&Abrisk_Intervention$riskcata==0])
table(Abrisk_Intervention$MLcat[Abrisk_Intervention$AGEcata==6&Abrisk_Intervention$riskcata==0])

table(Abrisk_Intervention$MLcat[Abrisk_Intervention$AGEcata==3&Abrisk_Intervention$riskcata==1])
table(Abrisk_Intervention$MLcat[Abrisk_Intervention$AGEcata==4&Abrisk_Intervention$riskcata==1])
table(Abrisk_Intervention$MLcat[Abrisk_Intervention$AGEcata==5&Abrisk_Intervention$riskcata==1])
table(Abrisk_Intervention$MLcat[Abrisk_Intervention$AGEcata==6&Abrisk_Intervention$riskcata==1])

length(Abrisk_Intervention$MLcat)
Abrisk_Intervention$agreement<-ifelse(Abrisk_Intervention$riskcata==Abrisk_Intervention$MLcat,1,0)
table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$riskcata==0&Abrisk_Intervention$Band==2],Abrisk_Intervention$agreement[Abrisk_Intervention$riskcata==0&Abrisk_Intervention$Band==2])
table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$riskcata==1&Abrisk_Intervention$Band==2],Abrisk_Intervention$agreement[Abrisk_Intervention$riskcata==1&Abrisk_Intervention$Band==2])


table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$Band==2])

table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$MLcat==0&Abrisk_Intervention$Band==2],Abrisk_Intervention$riskcata[Abrisk_Intervention$MLcat==0&Abrisk_Intervention$Band==2])
table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$MLcat==1&Abrisk_Intervention$Band==2],Abrisk_Intervention$riskcata[Abrisk_Intervention$MLcat==1&Abrisk_Intervention$Band==2])

table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$MLcat==0&Abrisk_Intervention$Band==2],Abrisk_Intervention$agreement[Abrisk_Intervention$MLcat==0&Abrisk_Intervention$Band==2])
table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$MLcat==1&Abrisk_Intervention$Band==2],Abrisk_Intervention$agreement[Abrisk_Intervention$MLcat==1&Abrisk_Intervention$Band==2])

table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$riskcata==1],Abrisk_Intervention$agreement[Abrisk_Intervention$riskcata==1])

table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$MLcat==0],Abrisk_Intervention$agreement[Abrisk_Intervention$MLcat==0])
table(Abrisk_Intervention$AGEcata[Abrisk_Intervention$MLcat==1],Abrisk_Intervention$agreement[Abrisk_Intervention$MLcat==1])


#Cancer surveillence 
#Mamm
#0 Do not have mammograms
#1 It has been more than a year
#2 Every year
#3 Every 6 months
#4 Every 3-4 months
#MRI
#1 Every 3-4 months (3-4 times a year)
#2 Every 6 months (2 times a year)
#3 Every 12 months (once a year)
#4 It has been more than 12 months since I last did a breast self-exam
#CBE
#0 Never
#1 More than a year
#2 Every year
#3 Every 6 months
#4 Every 3-4 months



Abrisk_Intervention$rb_81_FreqMamm<-InterventionData$rb_81_FreqMamm
Abrisk_Intervention$B_82_FreqMRI<-InterventionData$B_82_FreqMRI
Abrisk_Intervention$rb_80_FreqCBE<-InterventionData$rb_80_FreqCBE

table(Abrisk_Intervention$MLcat[Abrisk_Intervention$Band==2],Abrisk_Intervention$rb_81_FreqMamm[Abrisk_Intervention$Band==2])

table(Abrisk_Intervention$MLcat[Abrisk_Intervention$Band==2],Abrisk_Intervention$AGEcata[Abrisk_Intervention$Band==2],Abrisk_Intervention$rb_81_FreqMamm[Abrisk_Intervention$Band==2])

table(Abrisk_Intervention$riskcata[Abrisk_Intervention$Band==2&Abrisk_Intervention$MLcat==0],Abrisk_Intervention$AGEcata[Abrisk_Intervention$Band==2&Abrisk_Intervention$MLcat==0],Abrisk_Intervention$rb_81_FreqMamm[Abrisk_Intervention$Band==2&Abrisk_Intervention$MLcat==0])
table(Abrisk_Intervention$riskcata[Abrisk_Intervention$Band==2&Abrisk_Intervention$MLcat==1],Abrisk_Intervention$AGEcata[Abrisk_Intervention$Band==2&Abrisk_Intervention$MLcat==1],Abrisk_Intervention$rb_81_FreqMamm[Abrisk_Intervention$Band==2&Abrisk_Intervention$MLcat==1])

table(Abrisk_Intervention$MLcat[Abrisk_Intervention$Band==2],Abrisk_Intervention$rb_81_FreqMamm[Abrisk_Intervention$Band==2],Abrisk_Intervention$AGEcata[Abrisk_Intervention$Band==2])


table(Abrisk_Intervention$riskcata[Abrisk_Intervention$riskcata==0&Abrisk_Intervention$MLcat==1&Abrisk_Intervention$Band==2],Abrisk_Intervention$B_82_FreqMRI[Abrisk_Intervention$riskcata==0&Abrisk_Intervention$Band==2&Abrisk_Intervention$MLcat==1])
table(Abrisk_Intervention$riskcata[Abrisk_Intervention$riskcata==1&Abrisk_Intervention$MLcat==0&Abrisk_Intervention$Band==2],Abrisk_Intervention$B_82_FreqMRI[Abrisk_Intervention$riskcata==1&Abrisk_Intervention$Band==2&Abrisk_Intervention$MLcat==0])

table(Abrisk_Intervention$MLcat[Abrisk_Intervention$Band==2],Abrisk_Intervention$rb_80_FreqCBE[Abrisk_Intervention$Band==2])
table(Abrisk_Intervention$riskcata[Abrisk_Intervention$Band==2],Abrisk_Intervention$rb_80_FreqCBE[Abrisk_Intervention$Band==2])

table(Abrisk_Intervention$riskcata[Abrisk_Intervention$riskcata==0&Abrisk_Intervention$MLcat==1&Abrisk_Intervention$Band==2],Abrisk_Intervention$rb_80_FreqCBE[Abrisk_Intervention$riskcata==0&Abrisk_Intervention$MLcat==1&Abrisk_Intervention$Band==2])
table(Abrisk_Intervention$riskcata[Abrisk_Intervention$riskcata==1&Abrisk_Intervention$MLcat==0&Abrisk_Intervention$Band==2],Abrisk_Intervention$rb_80_FreqCBE[Abrisk_Intervention$riskcata==1&Abrisk_Intervention$MLcat==0&Abrisk_Intervention$Band==2])

#write.csv(Abrisk_Intervention,"relass.csv")


#by age plot 


library(ggplot2)

ML_Randomforest<-c(0:100)
BCRAT<-c(0:100)
AgeCategories<-Abrisk_Intervention$AGEcata
#plotReclass<-ggplot(Abrisk_Intervention, aes(ML_Randomforest,BCRAT))+ scale_color_manual(breaks = c("3", "4", "5","6"),
#                        values=c("red", "blue", "green","yellow"))+geom_point(aes(MLabsrsik,AbsRisk,colour=AgeCategories)) +geom_vline(xintercept = 20, #colour="green") + geom_hline(yintercept = 20, colour="red")

Abrisk_Intervention$AGEcata<-as.factor(Abrisk_Intervention$AGEcata)

sp<-ggplot(Abrisk_Intervention[Abrisk_Intervention$Band==2,], aes(x=MLabsrsik, y=AbsRisk, color=AGEcata)) + geom_point() + scale_color_manual(breaks = c("30-39", "40-49", "50-59","60-69"),values=c("red", "blue", "green","orange"))+geom_vline(xintercept = 20, colour="green") + geom_hline(yintercept = 20, colour="blue") + scale_colour_discrete(name  ="Age Categories")+ xlab("ML-Random Forest Risk Estimation") +
ylab("BCRAT Risk Estimation")+scale_y_continuous(breaks=seq(0,50,5))+scale_x_continuous(breaks=seq(0,100,10)) 

sp

#by Nbio plot 

ML_Randomforest<-c(0:100)
BCRAT<-c(0:100)
Abrisk_Intervention$N_Biop<-as.factor(Abrisk_Intervention$N_Biop)
Abrisk_Intervention$N_BiopCate<-ifelse(Abrisk_Intervention$N_Biop!=0,"Had biopsies","Had no biopsies")
N_BiopCate<-Abrisk_Intervention$N_BiopCate
table(N_BiopCate[Abrisk_Intervention$Band==2])

sp_N_Biop<-ggplot(Abrisk_Intervention[Abrisk_Intervention$Band==2,], aes(x=MLabsrsik, y=AbsRisk, color=N_BiopCate)) + geom_point() + scale_color_manual(breaks = c("Had biopsies","Had no biopsies"),values=c("red", "blue"))+geom_vline(xintercept = 20, colour="green") + geom_hline(yintercept = 20, colour="blue") + scale_colour_discrete(name  ="Biopsies")+ xlab("ML-Random Forest Risk Estimation") +
ylab("BCRAT Risk Estimation")+scale_y_continuous(breaks=seq(0,50,5))+scale_x_continuous(breaks=seq(0,100,10)) 

sp_N_Biop

##

#by N_Relative plot 

ML_Randomforest<-c(0:100)
BCRAT<-c(0:100)
Abrisk_Intervention$N_Rels<-as.numeric(as.character(Abrisk_Intervention$N_Rels))
Abrisk_Intervention$N_Rels<-ifelse(Abrisk_Intervention$N_Rels<1,1,Abrisk_Intervention$N_Rels)
Abrisk_Intervention$N_RelsCate[Abrisk_Intervention$N_Rels==1]<-"Having one"
Abrisk_Intervention$N_RelsCate[Abrisk_Intervention$N_Rels==2]<-"Having more than one"
Abrisk_Intervention$N_RelsCate[Abrisk_Intervention$N_Rels==3]<-"Having more than one"
Abrisk_Intervention$N_RelsCate[Abrisk_Intervention$N_Rels==4]<-"Having more than one"
Abrisk_Intervention$N_RelsCate[Abrisk_Intervention$N_Rels==5]<-"Having more than one"

N_RelsCate<-Abrisk_Intervention$N_RelsCate
table(Abrisk_Intervention$N_RelsCate[Abrisk_Intervention$Band==2])

sp_N_Re<-ggplot(Abrisk_Intervention[Abrisk_Intervention$Band==2,], aes(x=MLabsrsik, y=AbsRisk, color=N_RelsCate)) + geom_point() + scale_color_manual(breaks = c("Having one","Having more than one"),values=c("red", "blue"))+geom_vline(xintercept = 20, colour="green") + geom_hline(yintercept = 20, colour="blue") + scale_colour_discrete(name  ="Number of relative affected with breast cancer")+ xlab("ML-Random Forest Risk Estimation") +
ylab("BCRAT Risk Estimation")+scale_y_continuous(breaks=seq(0,50,5))+scale_x_continuous(breaks=seq(0,100,10)) 

sp_N_Re

ML_Randomforest<-c(0:100)
BCRAT<-c(0:100)
Abrisk_Intervention$N_Rels<-as.numeric(as.character(Abrisk_Intervention$N_Rels))
Abrisk_Intervention$N_Rels<-ifelse(Abrisk_Intervention$N_Rels<1,1,Abrisk_Intervention$N_Rels)
Abrisk_Intervention$N_RelsCate2<-Abrisk_Intervention$N_Rels


N_RelsCate2<-Abrisk_Intervention$N_RelsCate2
table(Abrisk_Intervention$N_RelsCate2[Abrisk_Intervention$Band==2])

Abrisk_Intervention$N_RelsCate2<-as.factor(Abrisk_Intervention$N_RelsCate2)

sp_N_Re2<-ggplot(Abrisk_Intervention[Abrisk_Intervention$Band==2,], aes(x=MLabsrsik, y=AbsRisk, color=N_RelsCate2)) + geom_point() + scale_color_manual(breaks = c("1","2","3","4","5"),values=c("red", "blue","green","orange","black"))+geom_vline(xintercept = 20, colour="green") + geom_hline(yintercept = 20, colour="blue") + scale_colour_discrete(name  ="Number of relative affected with breast cancer")+ xlab("ML-Random Forest Risk Estimation") +
ylab("BCRAT Risk Estimation")+scale_y_continuous(breaks=seq(0,50,5))+scale_x_continuous(breaks=seq(0,100,10)) 

sp_N_Re2

## density polt


poltML<-as.data.frame(Abrisk_Intervention[Abrisk_Intervention$Band==2,19])
colnames(poltML)[1] <- "risk"
poltBCRAT<-as.data.frame(Abrisk_Intervention[Abrisk_Intervention$Band==2,14])
colnames(poltBCRAT)[1] <- "risk"
poltML$Method<-rep("ML-RF",293)
poltBCRAT$Method<-rep("BCRAT",293)

MLpotden<-rbind(poltML,poltBCRAT)


s

# Change density plot fill colors by groups
# Use semi-transparent fill
p_density<-ggplot(MLpotden, aes(x=risk, fill=Method)) +
  geom_density(alpha=0.4)+ geom_vline(data=MLpotden, aes(xintercept=20),
             linetype="dashed")

p_density


### Plot ROC

kf = KFold(n=len(y), n_folds=10)

tprs = []
base_fpr = np.linspace(0, 1, 101)

plt.figure(figsize=(5, 5))

for i, (train, test) in enumerate(kf):
    model = LogisticRegression().fit(X[train], y[train])
    y_score = model.predict_proba(X[test])
    fpr, tpr, _ = roc_curve(y[test], y_score[:, 1])

    plt.plot(fpr, tpr, 'b', alpha=0.15)
    tpr = interp(base_fpr, fpr, tpr)
    tpr[0] = 0.0
    tprs.append(tpr)

tprs = np.array(tprs)
mean_tprs = tprs.mean(axis=0)
std = tprs.std(axis=0)

tprs_upper = np.minimum(mean_tprs + std, 1)
tprs_lower = mean_tprs - std


plt.plot(base_fpr, mean_tprs, 'b')
plt.fill_between(base_fpr, tprs_lower, tprs_upper, color='grey', alpha=0.3)

plt.plot([0, 1], [0, 1],'r--')
plt.xlim([-0.01, 1.01])
plt.ylim([-0.01, 1.01])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.axes().set_aspect('equal', 'datalim')
plt.show()

idx = np.arange(0, len(y))

for j in np.random.randint(0, high=10000, size=10):
    np.random.shuffle(idx)
    kf = KFold(n=len(y), n_folds=10, random_state=j)

    for i, (train, test) in enumerate(kf):
        model = "your method"().fit(X[idx][train], y[idx][train])
        y_score = model.predict_proba(X[idx][test])
        fpr, tpr, _ = roc_curve(y[idx][test], y_score[:, 1])

        plt.plot(fpr, tpr, 'b', alpha=0.05)
        tpr = interp(base_fpr, fpr, tpr)
        tpr[0] = 0.0
        tprs.append(tpr)
```
